package core;import java.util.ArrayList;import java.util.HashMap;import java.util.Map;import java.util.logging.Level;import java.util.logging.Logger;public class Player implements Cloneable {    private String color;    private int politicalScore;    private int religiousScore;    private int economicScore;    private int nbStupa;    private int nbDelegation;    private int nbTransactionDone;    private boolean completedOrder;    private Village currentPosition;    private ArrayList<Resource> resources;    private ArrayList<Action> actions;    private HashMap<Region, Integer> delegations;    private int villageOrderId;    private int nbYacksOrder;    public Player(String color, Village v) {        this.color = color;        currentPosition = v;        politicalScore = 0;        religiousScore = 0;        economicScore = 0;        nbStupa = 5;        nbDelegation = 15;        completedOrder = false;        nbTransactionDone = 0;        resources = new ArrayList<>();        actions = new ArrayList<>();        delegations = new HashMap<>();    }    public HashMap<Region, Integer> getDelegations() {        return delegations;    }    public void setPoliticalScore(int politicalScore) {        this.politicalScore = politicalScore;    }    public void setReligiousScore(int religiousScore) {        this.religiousScore = religiousScore;    }    public void setEconomicScore(int economicScore) {        this.economicScore = economicScore;    }    public void addDelegations(Region r, Integer nb) {        nbDelegation -= nb;        delegations.put(r, nb);    }    public int getNbTransactionDone() {        return nbTransactionDone;    }    public int getNbStupa() {        return nbStupa;    }    public void setNbTransactionDone(int nbTransactionDone) {        this.nbTransactionDone = nbTransactionDone;    }    public void putStupa() {        if (nbStupa > 0 && currentPosition.getStupa() == null) {            nbStupa--;            currentPosition.setStupa(this);        } else {            System.out.println("Vous n'avez plus de Stupa.");        }    }    public boolean asCompletedOrder() {        return completedOrder;    }    public void setCompletedOrder(boolean completedOrder, int villageId, int nbYacksOrder) {        this.villageOrderId = villageId;        this.completedOrder = completedOrder;        this.nbYacksOrder = nbYacksOrder;    }    public int getVillageOrderId() {        return villageOrderId;    }    public int getNbYacksOrder() {        return nbYacksOrder;    }    public void addResource(Resource resource) {        this.resources.add(resource);    }    public void addAction(Action action) {        this.actions.add(action);    }    public int getPoliticalScore() {        return politicalScore;    }    public int getReligiousScore() {        return religiousScore;    }    public int getEconomicScore() {        return economicScore;    }    public String getColor() {        return color;    }    public Village getPosition() {        return currentPosition;    }    public void setPosition(Village v) {        currentPosition = v;    }    public void resetActions() {        actions.clear();    }    public Action getAction(int i) {        return actions.get(i);    }    public void move(Village dest) {        currentPosition = dest;    }    public ArrayList<Resource> getResources() {        return resources;    }    public int getNbResources(Resource.Type type) {        int result = 0;        for (Resource resource : resources) {            if (resource.getType().equals(type)) {                result++;            }        }        return result;    }    public void removeResource(Resource r) {        resources.remove(r);    }    public Resource getSpecificResource(Resource.Type type) {        for (Resource res : resources) {            if (res.getType().equals(type)) {                return res;            }        }        return null;    }    void clearActions() {        actions.clear();    }    public Object clone() {        Player p = null;        try {            // On récupère l'instance à renvoyer par l'appel de la             // méthode super.clone()            p = (Player) super.clone();        } catch (CloneNotSupportedException ex) {            // Ne devrait jamais arriver car nous implémentons             // l'interface Cloneable            Logger.getLogger(Board.class.getName()).log(Level.SEVERE, null, ex);        }        p.actions = actions;        p.color = color;        p.completedOrder = completedOrder;        p.currentPosition = currentPosition;        p.delegations = new HashMap<>(delegations.size());        for (Map.Entry<Region, Integer> entry : delegations.entrySet()) {            Region reg = (Region) entry.getKey().clone();            Integer nbDelegations = new Integer(entry.getValue());            p.delegations.put(reg, nbDelegations);        }        p.nbDelegation = nbDelegation;        p.nbStupa = nbStupa;        p.nbTransactionDone = nbTransactionDone;        p.nbYacksOrder = nbYacksOrder;        p.politicalScore = politicalScore;        p.economicScore = economicScore;        p.religiousScore = religiousScore;        p.resources = new ArrayList<>(resources.size());        for (Resource resource : resources) {            p.resources.add((Resource) resource.clone());        }        p.villageOrderId = villageOrderId;                return p;    }}